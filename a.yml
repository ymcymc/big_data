#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}#using System;
#using com.netbrain.ng.webservices.AOP.Filters;
#using com.netbrain.ng.webservices.Controllers.Base.Models;
#using NetBrain.Framework;
#using NetBrain.NG.DataModel.Common;
#using NetBrain.NG.DataModel.ExternalAPIServer;
#using NetBrain.NG.ExternalAPIServer.Service;
#using Newtonsoft.Json.Linq;
#using System.Collections.Generic;
#using System.Linq;
#using System.Net.Http;
#using System.Web.Http;
#using com.netbrain.ng.services.common.basemodel;
#using com.netbrain.ng.services.common.basemodel.NG_DeviceSetting;
#using com.netbrain.ng.webservices.Models;
#using NetBrain.NG.AnsibleIntegration.Service;
#using NetBrain.NG.AnsibleIntegration.Service.Model;
#using NetBrain.NG.DataModel.ActionTask;
#using NetBrain.NG.DataModel.AnsibleIntegration;
#using Newtonsoft.Json;
#using com.netbrain.ng.services.common.utility.Security;
#
#namespace com.netbrain.ng.webservices.Controllers.AnsibleIntegration
#{
#    [RoutePrefix("ansibleServer")]
#    public class AnsibleServerController : NGAPIBaseController
#    {
#        private IAnsibleService ansibleService;        
#
#        public AnsibleServerController(IAnsibleService ansibleService)
#        {
#            this.ansibleService = ansibleService;
#        }
#
#        // TODO:
#        //      多个Ansible Server Test Result 如何返回，还需要再设计
#        [HttpPost]
#        [Route("testConnection")]
#        [NoPermissionMark]
#        public List<APIResultTestConnection> TestConnection(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentNullException("request param is null");
#            }
#
#            List<APIResultTestConnection> lsApiRet = new List<APIResultTestConnection>();
#
#            IAnsibleService ansibleSrvc = EngineContext.Current.Resolve<IAnsibleService>();
#
#            try
#            {
#                AnsibleServerTestConnectionModel requestModel = request.ToObject<AnsibleServerTestConnectionModel>();
#                requestModel.AnsibleServer.Key = requestModel.AnsibleServer.Key != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Key) : null;
#                requestModel.AnsibleServer.Certificate = requestModel.AnsibleServer.Certificate != null ? Utility.DecryptPassword(requestModel.AnsibleServer.Certificate) : null;
#
#                return ansibleSrvc.TestConnection(requestModel.AnsibleServer, requestModel.FsIdList);
#            }
#            catch (Exception ex)
#            {
#                throw ex;
#            }
#
#            return null;
#        }
#
#        /// <summary>
#        /// add or edit a ansible server
#        /// <para>find by id</para>
#        /// </summary>
#        /// <param name="server">AnsibleServer</param>
#        [HttpPost]
#        [Route("upsert")]
#        [NoPermissionMark]
#        public void Upsert(AnsibleServer server)
#        {
#            server.Key = server.Key != null ? Utility.DecryptPassword(server.Key) : null;
#            server.Certificate = server.Certificate != null ? Utility.DecryptPassword(server.Certificate) : null;
#            this.ansibleService.UpInsertAnsibleServer(server, this.NGSession.UserID, this.NGSession.UserName);
#        }
#
#        /// <summary>
#        /// delete a ansible server by id
#        /// </summary>
#        /// <param name="id">string, id</param>
#        [HttpDelete]
#        [Route("{id}")]
#        [NoPermissionMark]
#        public void Delete(string id)
#        {
#            this.ansibleService.DeleteAnsibleServer(id);
#        }
#
#        /// <summary>
#        /// delete ansbile server by id list
#        /// </summary>
#        /// <param name="request">dynamic, id list</param>
#        /// <returns></returns>
#        [HttpPost]
#        [Route("delete")]
#        [NoPermissionMark]
#        public bool DeleteBatch(dynamic request)
#        {
#            if (null == request)
#            {
#                throw new ArgumentException("wrong arg");
#            }
#
#            try
#            {
#                List<string> lsServerIds = request.ToObject<List<string>>();
#                return this.ansibleService.DeleteBatchAnsibleServer(lsServerIds);
#            }
#            catch (Exception ex)
#            {
#                throw new Exception(ex.Message);
#            }
#        }
#
#        /// <summary>
#        /// get all ansible server 
#        /// </summary>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getall")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetAll()
#        {
#            return this.ansibleService.GetALLAnsibleServer();
#        }
#
#        /// <summary>
#        /// Get all ansible server by id list
#        /// </summary>
#        /// <param name="ids">id array, string list</param>
#        /// <returns></returns>
#        [HttpGet]
#        [Route("getbyids")]
#        [NoPermissionMark]
#        public IEnumerable<AnsibleServer> GetByIds(IEnumerable<string> ids)
#        {
#            return this.ansibleService.GetAnsibleServerByIds(ids);
#        }
#    }
#}
- name: "show ip interface brief"
  hosts: all
  gather_facts: no
 
  tasks:
    # Cisco IOS show cmd
    - name: run show ip interface brief IOS
      ios_command:
        commands: show ip interface brief
        wait_for: result[0] contains Interface
      register: interfaces

    - name: debug print all interfaces
      debug:
        msg: "{{ interfaces.stdout }}"

